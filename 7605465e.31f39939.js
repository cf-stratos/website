(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{118:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var r=n(2),a=n(6),o=(n(0),n(194)),i={id:"db-migration",title:"Associate a Cloud Foundry database service",sidebar_label:"Database service bindings"},c={unversionedId:"deploy/cloud-foundry/db-migration",id:"version-4.1.0/deploy/cloud-foundry/db-migration",isDocsHomePage:!1,title:"Associate a Cloud Foundry database service",description:"As described in the standard cf push instructions here Stratos, when deployed via cf push,",source:"@site/versioned_docs/version-4.1.0/deploy/cloud-foundry/db-migration.md",permalink:"/docs/deploy/cloud-foundry/db-migration",editUrl:"https://github.com/cloudfoundry/stratos/edit/master/website/versioned_docs/version-4.1.0/deploy/cloud-foundry/db-migration.md",version:"4.1.0",sidebar_label:"Database service bindings",sidebar:"version-4.1.0/docs",previous:{title:"Deploying as a Cloud Foundry Application",permalink:"/docs/deploy/cloud-foundry/cloud-foundry"},next:{title:"Troubleshooting Cloud Foundry Deployment",permalink:"/docs/deploy/cloud-foundry/cf-troubleshooting"}},s=[{value:"Note on Service Bindings",id:"note-on-service-bindings",children:[]}],l={rightToc:s};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"As described in the standard ",Object(o.b)("inlineCode",{parentName:"p"},"cf push")," instructions ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"cloud-foundry"}),"here")," Stratos, when deployed via ",Object(o.b)("inlineCode",{parentName:"p"},"cf push"),",\ndoes not contain any way to persist data over application restarts and db entries such as registered endpoints\nand user tokens are lost. To resolve this a Cloud Foundry db service can be bound to to it. Run through\nthe steps below to implement."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a Database Service Instance"),Object(o.b)("blockquote",{parentName:"li"},Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"NOTE")," Stratos supports postgresql and mysql DBs. Stratos will enumerate the bound service instances to detect the database type - see  ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"#note-on-service-bindings"}),"below")," for more detail.")),Object(o.b)("p",{parentName:"li"},"Use ",Object(o.b)("inlineCode",{parentName:"p"},"cf create-service")," to create a service instance for the DB - for example:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"cf create-service postgresql v9.4 console_db\n")),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"In this example, ",Object(o.b)("inlineCode",{parentName:"li"},"postgresql")," is the service name for the Postgres DB service, ",Object(o.b)("inlineCode",{parentName:"li"},"v9.4")," is the service plan and ",Object(o.b)("inlineCode",{parentName:"li"},"console_db")," is the name for the service instance that will be created. "),Object(o.b)("li",{parentName:"ul"},"To view services and service plans:",Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"cf marketplace\n")))),Object(o.b)("p",{parentName:"li"},"You can also create an ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.cloudfoundry.org/devguide/services/user-provided.html"}),"User-Provided Service Instance"),":"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),'cf cups console_db  -p \'{"uri": "postgres://", "username":"console_appuser", "password":"***", "hostname":"192.168.12.34", "port":"5432", "dbname":"console_db" }\'\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Associate the new service with Stratos via the Manifest"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Add the service name to the ",Object(o.b)("inlineCode",{parentName:"li"},"services")," section of Stratos's ",Object(o.b)("inlineCode",{parentName:"li"},"manifest.yml"),", for example:",Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"services:\n")))),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"console_db",Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"")))),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"This specifies that Stratos should bind to the service instance named ",Object(o.b)("inlineCode",{parentName:"li"},"console_db")))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Push the app via cf push"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"cf push\n")))),Object(o.b)("h2",{id:"note-on-service-bindings"},"Note on Service Bindings"),Object(o.b)("p",null,"Stratos will look through all service instances that are bound to it and filter those to determine which are database services. It determines:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},'A Postgres database service if it has a uri field in the credentials object which begins with the string "postgres://" or it has a tag "postgresql"')),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},'A MySQL database service if it has a uri field in the credentials object which begins with the string "mysql://" or it has a tag "mysql"'))),Object(o.b)("p",null,"If there is a single database service instance, Stratos will use that."),Object(o.b)("p",null,'If there are multiple database service instances, Stratos will look for one with a tag of "stratos".'))}b.isMDXComponent=!0},194:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),b=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=b(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=b(n),u=r,m=p["".concat(i,".").concat(u)]||p[u]||d[u]||o;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);